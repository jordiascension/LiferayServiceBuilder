/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sinensia.business.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringUtil;

import com.sinensia.business.model.Libro;
import com.sinensia.business.model.LibroModel;
import com.sinensia.business.model.LibroSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Libro service. Represents a row in the &quot;LIBRO_Libro&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LibroModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LibroImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LibroImpl
 * @generated
 */
@JSON(strict = true)
public class LibroModelImpl extends BaseModelImpl<Libro> implements LibroModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a libro model instance should use the <code>Libro</code> interface instead.
	 */
	public static final String TABLE_NAME = "LIBRO_Libro";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"libroId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"titulo", Types.VARCHAR}, {"escritor", Types.VARCHAR},
		{"publicacion", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("libroId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("titulo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("escritor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("publicacion", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LIBRO_Libro (uuid_ VARCHAR(75) null,libroId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,titulo VARCHAR(75) null,escritor VARCHAR(75) null,publicacion DATE null)";

	public static final String TABLE_SQL_DROP = "drop table LIBRO_Libro";

	public static final String ORDER_BY_JPQL =
		" ORDER BY libro.titulo ASC, libro.escritor ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LIBRO_Libro.titulo ASC, LIBRO_Libro.escritor ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.sinensia.business.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.sinensia.business.model.Libro"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.sinensia.business.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.sinensia.business.model.Libro"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		com.sinensia.business.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.com.sinensia.business.model.Libro"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long TITULO_COLUMN_BITMASK = 4L;

	public static final long UUID_COLUMN_BITMASK = 8L;

	public static final long ESCRITOR_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Libro toModel(LibroSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Libro model = new LibroImpl();

		model.setUuid(soapModel.getUuid());
		model.setLibroId(soapModel.getLibroId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setTitulo(soapModel.getTitulo());
		model.setEscritor(soapModel.getEscritor());
		model.setPublicacion(soapModel.getPublicacion());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Libro> toModels(LibroSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Libro> models = new ArrayList<Libro>(soapModels.length);

		for (LibroSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.sinensia.business.service.util.ServiceProps.get(
			"lock.expiration.time.com.sinensia.business.model.Libro"));

	public LibroModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _libroId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLibroId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _libroId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Libro.class;
	}

	@Override
	public String getModelClassName() {
		return Libro.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Libro, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Libro, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Libro, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Libro)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Libro, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Libro, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Libro)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Libro, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Libro, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Libro>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Libro.class.getClassLoader(), Libro.class, ModelWrapper.class);

		try {
			Constructor<Libro> constructor =
				(Constructor<Libro>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Libro, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Libro, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Libro, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Libro, Object>>();
		Map<String, BiConsumer<Libro, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Libro, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<Libro, Object>() {

				@Override
				public Object apply(Libro libro) {
					return libro.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<Libro, Object>() {

				@Override
				public void accept(Libro libro, Object uuidObject) {
					libro.setUuid((String)uuidObject);
				}

			});
		attributeGetterFunctions.put(
			"libroId",
			new Function<Libro, Object>() {

				@Override
				public Object apply(Libro libro) {
					return libro.getLibroId();
				}

			});
		attributeSetterBiConsumers.put(
			"libroId",
			new BiConsumer<Libro, Object>() {

				@Override
				public void accept(Libro libro, Object libroIdObject) {
					libro.setLibroId((Long)libroIdObject);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<Libro, Object>() {

				@Override
				public Object apply(Libro libro) {
					return libro.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<Libro, Object>() {

				@Override
				public void accept(Libro libro, Object groupIdObject) {
					libro.setGroupId((Long)groupIdObject);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<Libro, Object>() {

				@Override
				public Object apply(Libro libro) {
					return libro.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<Libro, Object>() {

				@Override
				public void accept(Libro libro, Object companyIdObject) {
					libro.setCompanyId((Long)companyIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<Libro, Object>() {

				@Override
				public Object apply(Libro libro) {
					return libro.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<Libro, Object>() {

				@Override
				public void accept(Libro libro, Object userIdObject) {
					libro.setUserId((Long)userIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<Libro, Object>() {

				@Override
				public Object apply(Libro libro) {
					return libro.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<Libro, Object>() {

				@Override
				public void accept(Libro libro, Object userNameObject) {
					libro.setUserName((String)userNameObject);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<Libro, Object>() {

				@Override
				public Object apply(Libro libro) {
					return libro.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<Libro, Object>() {

				@Override
				public void accept(Libro libro, Object createDateObject) {
					libro.setCreateDate((Date)createDateObject);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<Libro, Object>() {

				@Override
				public Object apply(Libro libro) {
					return libro.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<Libro, Object>() {

				@Override
				public void accept(Libro libro, Object modifiedDateObject) {
					libro.setModifiedDate((Date)modifiedDateObject);
				}

			});
		attributeGetterFunctions.put(
			"titulo",
			new Function<Libro, Object>() {

				@Override
				public Object apply(Libro libro) {
					return libro.getTitulo();
				}

			});
		attributeSetterBiConsumers.put(
			"titulo",
			new BiConsumer<Libro, Object>() {

				@Override
				public void accept(Libro libro, Object tituloObject) {
					libro.setTitulo((String)tituloObject);
				}

			});
		attributeGetterFunctions.put(
			"escritor",
			new Function<Libro, Object>() {

				@Override
				public Object apply(Libro libro) {
					return libro.getEscritor();
				}

			});
		attributeSetterBiConsumers.put(
			"escritor",
			new BiConsumer<Libro, Object>() {

				@Override
				public void accept(Libro libro, Object escritorObject) {
					libro.setEscritor((String)escritorObject);
				}

			});
		attributeGetterFunctions.put(
			"publicacion",
			new Function<Libro, Object>() {

				@Override
				public Object apply(Libro libro) {
					return libro.getPublicacion();
				}

			});
		attributeSetterBiConsumers.put(
			"publicacion",
			new BiConsumer<Libro, Object>() {

				@Override
				public void accept(Libro libro, Object publicacionObject) {
					libro.setPublicacion((Date)publicacionObject);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getLibroId() {
		return _libroId;
	}

	@Override
	public void setLibroId(long libroId) {
		_libroId = libroId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTitulo() {
		if (_titulo == null) {
			return "";
		}
		else {
			return _titulo;
		}
	}

	@Override
	public void setTitulo(String titulo) {
		_columnBitmask = -1L;

		if (_originalTitulo == null) {
			_originalTitulo = _titulo;
		}

		_titulo = titulo;
	}

	public String getOriginalTitulo() {
		return GetterUtil.getString(_originalTitulo);
	}

	@JSON
	@Override
	public String getEscritor() {
		if (_escritor == null) {
			return "";
		}
		else {
			return _escritor;
		}
	}

	@Override
	public void setEscritor(String escritor) {
		_columnBitmask = -1L;

		_escritor = escritor;
	}

	@JSON
	@Override
	public Date getPublicacion() {
		return _publicacion;
	}

	@Override
	public void setPublicacion(Date publicacion) {
		_publicacion = publicacion;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Libro.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Libro.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Libro toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Libro>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LibroImpl libroImpl = new LibroImpl();

		libroImpl.setUuid(getUuid());
		libroImpl.setLibroId(getLibroId());
		libroImpl.setGroupId(getGroupId());
		libroImpl.setCompanyId(getCompanyId());
		libroImpl.setUserId(getUserId());
		libroImpl.setUserName(getUserName());
		libroImpl.setCreateDate(getCreateDate());
		libroImpl.setModifiedDate(getModifiedDate());
		libroImpl.setTitulo(getTitulo());
		libroImpl.setEscritor(getEscritor());
		libroImpl.setPublicacion(getPublicacion());

		libroImpl.resetOriginalValues();

		return libroImpl;
	}

	@Override
	public int compareTo(Libro libro) {
		int value = 0;

		value = getTitulo().compareTo(libro.getTitulo());

		if (value != 0) {
			return value;
		}

		value = getEscritor().compareTo(libro.getEscritor());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Libro)) {
			return false;
		}

		Libro libro = (Libro)object;

		long primaryKey = libro.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_originalUuid = _uuid;

		_originalGroupId = _groupId;

		_setOriginalGroupId = false;

		_originalCompanyId = _companyId;

		_setOriginalCompanyId = false;

		_setModifiedDate = false;
		_originalTitulo = _titulo;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Libro> toCacheModel() {
		LibroCacheModel libroCacheModel = new LibroCacheModel();

		libroCacheModel.uuid = getUuid();

		String uuid = libroCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			libroCacheModel.uuid = null;
		}

		libroCacheModel.libroId = getLibroId();

		libroCacheModel.groupId = getGroupId();

		libroCacheModel.companyId = getCompanyId();

		libroCacheModel.userId = getUserId();

		libroCacheModel.userName = getUserName();

		String userName = libroCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			libroCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			libroCacheModel.createDate = createDate.getTime();
		}
		else {
			libroCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			libroCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			libroCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		libroCacheModel.titulo = getTitulo();

		String titulo = libroCacheModel.titulo;

		if ((titulo != null) && (titulo.length() == 0)) {
			libroCacheModel.titulo = null;
		}

		libroCacheModel.escritor = getEscritor();

		String escritor = libroCacheModel.escritor;

		if ((escritor != null) && (escritor.length() == 0)) {
			libroCacheModel.escritor = null;
		}

		Date publicacion = getPublicacion();

		if (publicacion != null) {
			libroCacheModel.publicacion = publicacion.getTime();
		}
		else {
			libroCacheModel.publicacion = Long.MIN_VALUE;
		}

		return libroCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Libro, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Libro, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Libro, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Libro)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Libro, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Libro, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Libro, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Libro)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Libro>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;
	private long _libroId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _titulo;
	private String _originalTitulo;
	private String _escritor;
	private Date _publicacion;
	private long _columnBitmask;
	private Libro _escapedModel;

}